<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Exam Preparation</title>
    <style>
        body {
            background: linear-gradient(135deg, #c850c0, #4158d0);
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
        }
        
        .logo-container {
            display: inline-block;
            background-color: white;
            border-radius: 50%;
            padding: 10px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
        }
        
        .logo {
            display: block;
            font-size: 24px;
            line-height: 1;
        }
        
        header {
            background-color: #333;
            color: white;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        nav ul {
            list-style-type: none;
            display: flex;
        }
        
        nav ul li {
            margin-right: 20px;
        }
        
        nav a {
            text-decoration: none;
            color: white;
        }
        
        main {
            padding: 20px;
        }
        
        .hero {
            background: linear-gradient(135deg, #ffffff, #ffffff);
        }
        
        .bordered-section {
            background: linear-gradient(135deg, #2a5298, #5c0d7b);
        }
        
        .section-box {
            border: 5px solid #c9cd16;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .bordered-section {
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .progress-button,
        .take-test-button {
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            color: white;
            padding: 10px;
            border: none;
            cursor: pointer;
            border-radius: 15px;
        }
        
        .subjects {
            margin-top: 30px;
            margin-bottom: 30px;
        }
        
        .subject-container {
            display: flex;
            overflow-x: auto;
        }
        
        .subject {
            border: 5px solid #d0d238;
            padding: 10px;
            margin-right: 5px;
            cursor: pointer;
            white-space: nowrap;
        }
        
        .subject img {
            max-width: 100%;
            height: auto;
        }
        
        #profileButton {
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            color: white;
            padding: 10px;
            border: none;
            cursor: pointer;
            text-decoration: none;
            border-radius: 15px;
        }
        
        #profileButton:hover {
            background-color: #a0a020;
        }
        
        .exam,
        .yourself {
            background: linear-gradient(135deg, #755ab3, #071a3f, #715e9c);
        }
        
        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px;
        }
        
        .rounded-box {
            border: 5px solid #d0d238;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 15px;
        }
    </style>
    <style>
        .chain-container {
            margin: 5px;
        }

        .graph-and-timetable-container {
            display: flex;
        }

        .graph {
            flex: 1;
        }

        .timetable {
            flex: 0 0 30%;
            background: linear-gradient(135deg, #071a3f, #715e9c, #755ab3);
            padding: 20px;
            margin-bottom: 20px;
            max-height: 650px;
        }

        .chatbot {
            flex: 0 0 30%;
            background: linear-gradient(135deg, #071a3f, #715e9c, #755ab3);
            margin-left: 10px;
            max-height: 700px;
        }

        .timetable-container {
            overflow-y: auto;
            max-height: 400px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #d0d238;
            padding: 10px;
            text-align: left;
            color: whitesmoke;
        }

        th {
            background: linear-gradient(135deg, #5c0d7b, #2a5298);
            position: sticky;
            top: 0;
            z-index: 0;
        }
    </style>
    <style>
        /* styles.css */
        
        .chat-container {
            background-color: white;
            width: 300px;
            margin: 50px auto;
            margin-bottom: 0px;
            border: 1px solid #ccc;
            border-radius: 10px;
            padding: 10px;
        }
        
        .bot-container {
            width: 150px;
            height: 150px;
            margin: 50px auto;
            border: 5px solid #ccc;
            border-radius: 100px;
            padding-left: 10px;
        }
        
        .chat-box {
            height: 300px;
            overflow-y: scroll;
            border-bottom: 1px solid #ccc;
            margin-bottom: 10px;
        }
        
        #user-input {
            width: 200px;
            padding: 10px;
            border-radius: 25px;
        }
        
        button {
            padding: 5px 10px;
            border-radius: 25px;
        }
        
        .bot-avatar {
            width: 100px;
            height: 100px;
            background-size: contain;
            background-repeat: no-repeat;
            animation: moveRobot 0.5s infinite alternate;
            font-size: 100px;
        }
        
        @keyframes moveRobot {
            70% {
                transform: translateY(20px);
            }
        }
        
        .message {
            margin-bottom: 10px;
        }
        
        .user-message {
            background: linear-gradient(135deg, #071a3f, #715e9c, #755ab3);
            text-align: right;
            color: white;
            padding: 25px;
            margin-left: 50px;
            border-radius: 50px;
            border-bottom: 5px solid #ccc;
        }
        
        .bot-message {
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            text-align: left;
            padding: 25px;
            margin-right: 50px;
            border-radius: 50px;
            border-bottom: 5px solid #ccc;
        }
    </style>
</head>

<body>

    <header>
        <div class="logo-container">
            <div class="logo">üåê</div>
        </div>
        <nav>
            <ul>
                <li><a href="#">About us</a></li>
                <li><a href="#">Contact us</a></li>
                <li><a href="#" id="profileButton">Profile</a></li>
            </ul>
        </nav>
    </header>

    <!-- ... (previous HTML code) ... -->

    <main>
        <section class="hero rounded-box">
            <h2>Welcome to ExamPrep <span style="font-size:200%;">üöÄ</span></h2>
            <span style="position: absolute; right: 50px; top: 150px; font-size: 75px;">üíªüìä‚öôÔ∏è</span>
            <p>Your one-stop destination for exam preparations.</p>
        </section>
        <section class="intro-section rounded-box" style="position: relative;">
            <h2 style="color: azure;">
                Discover Your Strengths <span style="font-size: 200%;">üí°</span>
            </h2>
            <span style="position: absolute; right: 50px; top: 10px; font-size: 150px;">‚è∞</span>
            <p style="color: azure;">Explore personalized study recommendations and test your knowledge with our interactive quizzes.</p>
            <h2><button id="take-test-button" class="take-test-button">Take Test</button></h2>
        </section>
        <section class="subjects section-box">
            <section class="hero rounded-box">
                <h2>TOPICS <span style="font-size: 35px;">üß†</span></h2>
            </section>
            <div class="subject-container">
                <div id="linkedlist" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Linked List üöÇ</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.linkedlist}}" min="1" max="5" disabled></h3>
                </div>
                <div id="stack" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Stack üì¶üì¶üì¶</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl.<input type="range" value="{{statuses.stack}}" min="0" max="5" disabled></h3>
                </div>
                <div id="queue" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Queueüßçüö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.queue}}" min="0" max="5" disabled></h3>
                </div>
                <div id="tree" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Tree üå¥üå≤üå¥</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.tree}}" min="0" max="5" disabled></h3>
                </div>
                <div id="graph" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Graph üìà üìâ üìä</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.graph}}" min="0" max="5" disabled></h3>
                </div>
                <div id="hashing" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Hashing üîêüóÉÔ∏è</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.hashing}}" min="0" max="5" disabled></h3>
                </div>
                <div id="heap" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Heap üìöüìöüìö</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.heap}}" min="0" max="5" disabled></h3>
                </div>
                <div id="sorting" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Sorting üîÑüîÑüîÑ</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.sorting}}" min="0" max="5" disabled></h3>
                </div>
                <div id="searching" class="subject">
                    <h3 style="color:azure; border-radius:50px; background:#5c0d7b; padding:10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">Searching üîçüïµÔ∏è</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.searching}}" min="0" max="5" disabled></h3>
                </div>
                <div id="dynamicprogramming" class="subject">
                    <h3 style="color: azure; border-radius: 50px; background: #5c0d7b; padding: 10px; box-shadow: 0 0 0 3px lightgrey, 0 0 0 #5c0d7b;">D Programming üß†</h3>
                    <img src="https://via.placeholder.com/150" alt="Dummy Image"><br>
                    <h3 style="color: whitesmoke;">lvl. <input type="range" value="{{statuses.dynamicprogramming}}" min="0" max="5" disabled></h3>
                </div>
            </div>

        </section>

        <section class="exam section-box">
            <section class="hero rounded-box">
                <h2>Ongoing Topic : {{statuses.currenttopic}} <span style="font-size:150%;">üìñ‚úíÔ∏è</span></h2>
            </section>
            <section class="graph-and-timetable-container">
                <section class="graph section-box">
                    <svg class="graph-container" width="600" height="650"></svg>
                </section>

                {{!-- CHATBOT --}}
                {{!-- CHATBOT --}}
                {{!-- CHATBOT --}}
            <section class="chatbot section-box">
                <section class="hero rounded-box">
                    <h2 style="display: flex;flex-direction: column-reverse;">Your AI helperüîç<div class="bot-avatar" style="margin-left: 200px;">ü§ñ</div></h2>
                </section>
                <div class="chatbot-container hero rounded-box">
                    <div class="chat-container">
                        <div class="chat-box" id="chat-box"></div>
                        <input type="text" id="user-input" placeholder="Type your message...">
                        <button onclick="sendMessage()">Chat ‚èé</button>
                    </div>
                    <script>
                        const chatBox = document.getElementById('chat-box');
                        const userInput = document.getElementById('user-input');

                        function sendMessage() {
                            const message = userInput.value;
                            if (message.trim() !== '') {
                                appendMessage('You', message, 'user-message');
                                userInput.value = ''; // Clear input field

                                // Send user input to the server
                                $.ajax({
                                    type: "POST",
                                    url: "/ai",
                                    data: { message: message },
                                    success: function(response) {
                                        if (response.success) {
                                            appendMessage('Bot', response.result, 'bot-message');
                                        } else {
                                            alert(response.message);
                                        }
                                    },
                                    error: function(xhr, status, error) {
                                        console.error(xhr.responseText);
                                        alert("An error occurred while processing your request.");
                                    }
                                });
                            }
                        }

                        function appendMessage(sender, message, messageClass) {
                            const messageElement = document.createElement('div');
                            messageElement.classList.add('message');
                            messageElement.classList.add(messageClass);
                            messageElement.innerHTML = `<strong>${sender}:</strong> ${message}`;
                            chatBox.appendChild(messageElement);
                        }
                    </script>
                </div>
            </section>

            </section>

            {{!-- TIMETABLE --}}
            {{!-- TIMETABLE --}}
            {{!-- TIMETABLE --}}
            <section class="timetable section-box">
                <section class="hero rounded-box">
                    <h2>Study Timetable <span style="font-size:150%;">üìÖ</span></h2>
                </section>
                <div class="timetable-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Monday</th>
                                <th>Tuesday</th>
                                <th>Wednesday</th>
                                <th>Thursday</th>
                                <th>Friday</th>
                                <th>Saturday</th>
                                <th>Sunday</th>
                            </tr>
                        </thead>
                        <tbody id="timetable-body">
                        </tbody>
                    </table>
                </div>
                <div style="text-align: right; margin-top: 20px;">
                    <button id="generateTimetable" class="progress-button" style="font-size: 18px;" style="padding: 15px 30px;" onclick="generateTimetable()">Generate Timetable</button>
                </div>
                <script>
                    function generateTimetable() {
                            $.ajax({
                            type: "POST",
                            url: "/timetable",
                            success: function(response) {
                                if (response.success == true) {
                                    slots = response.result
                                    generateTimetableWithData(slots);
                                } else {
                                    alert(response.message);
                                }
                            }
                        });
                    }

                    function generateTimetableWithData(slots){
                        const timetableDataString = slots; // Replace empty string with provided string
                        const daysOfWeek = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
                        const slotsPerDay = 48; // Assuming 48 slots per day

                        const lines = timetableDataString.trim().split(' ');
                        const tableBody = document.getElementById('timetable-body');
                        tableBody.innerHTML = ""; // Clear existing table body

                        for (let i = 0; i < slotsPerDay; i++) {
                            const row = document.createElement('tr');
                            daysOfWeek.forEach((day, index) => {
                                const cell = document.createElement('td');
                                const slotIndex = i + slotsPerDay * index;
                                if (slotIndex < lines.length) {
                                    cell.textContent = lines[slotIndex].trim();
                                }
                                row.appendChild(cell);
                            });
                            tableBody.appendChild(row);
                        }
                    }
                </script>
            </section>

            <section>
                <script src="https://d3js.org/d3.v5.min.js"></script>
                <script>
                    // Sample graph dependencies
                    var dependencies = {
                        "L List": ["Stack", "Queue"],
                        "Stack": ["Tree", "Graph"],
                        "Queue": ["Hashing", "Heap"],
                        "Tree": ["Sorting", "Searching"],
                        "Graph": ["Heap", "D Prog"]
                    };

                    var svg = d3.select('.graph-container').append('svg').attr('width', 700).attr('height', 1000);

                    var links = [];
                    Object.keys(dependencies).forEach(function (node) {
                        dependencies[node].forEach(function (dependency) {
                            links.push({ source: node, target: dependency });
                        });
                    });

                    // Create nodes
                    var nodes = Array.from(new Set(links.flatMap(link => [link.source, link.target]))).map(name => ({ name }));

                    // Create the force simulation
                    var simulation = d3.forceSimulation(nodes)
                        .force('link', d3.forceLink(links).id(d => d.name).distance(100).strength(1))
                        .force('charge', d3.forceManyBody().strength(-300).distanceMin(50))
                        .force('center', d3.forceCenter(280, 330));

                    // Draw links
                    var link = svg.append('g')
                        .selectAll('line')
                        .data(links)
                        .enter().append('line')
                        .attr('stroke', '#3498db')
                        .attr('stroke-width', 3);

                    // Draw nodes
                    var node = svg.append('g')
                        .selectAll('circle')
                        .data(nodes)
                        .enter().append('circle')
                        .attr('r', 35)
                        .attr('fill', '#3498db');

                    // Draw labels for nodes
                    var label = svg.append('g')
                        .selectAll('text')
                        .data(nodes)
                        .enter().append('text')
                        .text(d => d.name)
                        .attr('font-size', '14px')
                        .attr('fill', '#fff')
                        .attr('text-anchor', 'middle')
                        .attr('dy', '0.35em');

                    // Update node positions during simulation
                    simulation.on('tick', function () {
                        link.attr('x1', d => d.source.x)
                            .attr('y1', d => d.source.y)
                            .attr('x2', d => d.target.x)
                            .attr('y2', d => d.target.y);

                        node.transition().duration(5) // Set the duration of the transition in milliseconds
                            .attr('cx', d => d.x)
                            .attr('cy', d => d.y);

                        label.transition().duration(50)
                            .attr('x', d => d.x)
                            .attr('y', d => d.y);
                    });

                    // Handle node click events
                    node.on('click', function (event, d) {
                        // Implement your desired action on node click here
                        console.log('Clicked on node:', d.name);
                        restartSimulation();
                    });

                    // Handle background click events
                    svg.on('click', function (event) {
                        // Implement your desired action on background click here
                        console.log('Clicked on the background');
                        restartSimulation();
                    });

                    // Function to restart the simulation
                    function restartSimulation() {
                        // Reset node positions
                        node.transition().duration(500)
                            .attr('cx', d => d.x)
                            .attr('cy', d => d.y);

                        // Reset label positions
                        label.transition().duration(500)
                            .attr('x', d => d.x)
                            .attr('y', d => d.y);

                        // Restart the simulation
                        simulation.alpha(1.5).restart();
                    }
                </script>
            </section>

        <section class="yourself section-box">
            <section class="hero rounded-box">
                <h2>Yourself <span style="font-size:150%;">üéì</span></h2>
            </section>
            <p style="color: rgb(220, 212, 212);">Personalized study recommendations, progress tracker, and tips here.</p>
            <h2><button id="progress" class="progress-button">Check your progress</button></h2>
        </section>
    </main>

    <footer>
        <p>Contact us at: üìß <a href="mailto:info@example.com" hidden>info@example.com</a> | Follow us on üåê <a href="#" target="_blank" hidden>Social Media</a> | Connect with us on üîó <a href="#" target="_blank" hidden>LinkedIn</a></p>
    </footer>
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
<script>
    const startTime = new Date();
    document.getElementById("take-test-button").addEventListener("click", function() {
        alert("Are you ready to take a test...")
        window.location.href = "http://localhost:4500/mcq";
    });

    document.getElementById("linkedlist").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/linkedlist";
    });

    document.getElementById("stack").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/stack";
    });

    document.getElementById("queue").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/queue";
    });

    document.getElementById("tree").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/tree";
    });

    document.getElementById("graph").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/graph";
    });

    document.getElementById("hashing").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/hashing";
    });

    document.getElementById("heap").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/heap";
    });

    document.getElementById("sorting").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/sorting";
    });

    document.getElementById("searching").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/searching";
    });

    document.getElementById("dynamicprogramming").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/doc/dynamicprogramming";
    });

    document.getElementById("progress").addEventListener("click", function() {
        window.location.href = "http://localhost:4500/progress";
    });
</script>
</body>

</html>