<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sample Bar Graph</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background: linear-gradient(135deg, #c850c0, #4158d0);
            font-family: 'Arial', sans-serif;
            margin: 10px;
            padding: 0;
            color: white;
            overflow: auto;
        }

        .hero {
            background: linear-gradient(135deg, #ffffff, #ffffff);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .rounded-box {
            border: 5px solid #d0d238;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 15px;
        }

        .chart-container {
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            padding: 20px;
            border-radius: 15px;
            margin: 20px;
            max-width: 100%;
        }

        .graph-container {
            border: 10px solid #d0d238;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 15px;
            width: 750px;
            height: 1100px;
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            padding: 20px;
            border-radius: 25px;
            margin: 20px;
            margin-left: 100px;
        }

        #close {
            position: fixed;
            top: 10px;
            right: 10px;
            background: linear-gradient(135deg, #ff7b25, #fdd803);
            color: white;
            padding: 10px;
            border: none;
            cursor: pointer;
            border-radius: 15px;
        }

        .hero h2 {
            margin: 10px 0;
        }
    </style>
    <style>
        .chain-container {
            margin: 5px;
            border: 15px solid white; /* Added white border */
            border-radius: 50px; /* Added border-radius */
        }

        .chain-circle {
            fill: #3498db; /* Circle color */
            stroke: #2980b9; /* Circle border color */
            stroke-width: 5;
        }

        .chain-text {
            fill: #fff; /* Text color */
            font-family: 'Arial', sans-serif;
            font-size: 12px;
            text-anchor: middle;
            dominant-baseline: middle;
        }
    </style>
</head>

<body>
    <section class="hero rounded-box">
        <h2 style="color: black;">Daily Performance</h2>
    </section>

    <section class="chart-container">
        <h2>Total Time you have spent on this Week</h2>
        <canvas id="totalTimeChart" style="width: 100%; height: auto; max-width: 1000px;"></canvas>
    </section>

    <section class="chart-container">
        <h2>Marks scored in the recent exam</h2>
        <canvas id="currentMarksChart" style="width: 100%; height: auto; max-width: 1000px;"></canvas>
    </section>

    <section class="chart-container">
        <h2>Your Priority should be</h2>
        <canvas id="priorityChart" style="width: 100%; height: auto; max-width: 1000px;"></canvas>
    </section>

    <button id="close" onclick="window.location.href='http://localhost:4500'">Close</button>

<script>
    // Simulated server-side data embedded in the HTML
    var serverData = {
        labels: ['Linked List', 'Stack', 'Queue', 'Tree', 'Graph', 'Hashing', 'Heap', 'Sorting', 'Searching', 'D Programming'],
        currentMarksData: [{{ statuses.linkedlist }}, {{ statuses.stack }}, {{ statuses.queue }}, {{ statuses.tree }}, {{ statuses.graph }}, {{ statuses.hashing }}, {{ statuses.heap }}, {{ statuses.sorting }}, {{ statuses.searching }}, {{ statuses.dynamicprogramming }}],
        totalTimeData: [{{ statuses.linkedlist_time }}, {{ statuses.stack_time }}, {{ statuses.queue_time }}, {{ statuses.tree_time }}, {{ statuses.graph_time }}, {{ statuses.hashing_time }}, {{ statuses.heap_time }}, {{ statuses.sorting_time }}, {{ statuses.searching_time }}, {{ statuses.dynamicprogramming_time }}],
        priorityData: [{{ statuses.linkedlist_priority }}, {{ statuses.stack_priority }}, {{ statuses.queue_priority }}, {{ statuses.tree_priority }}, {{ statuses.graph_priority }}, {{ statuses.hashing_priority }}, {{ statuses.heap_priority }}, {{ statuses.sorting_priority }}, {{ statuses.searching_priority }}, {{ statuses.dynamicprogramming_priority }}]
    };

    
    

    // Use the simulated server-side data to update the chart
    updateCharts(serverData);

    // Function to update the charts with new data
    function updateCharts(data) {
        var totalTimeChart = new Chart(document.getElementById('totalTimeChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: 'Total Time (in minutes)',
                    data: data.totalTimeData,
                    backgroundColor: '#ffffff',
                    borderColor: 'rgba(255,255,255,0.8)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    x: {
                        beginAtZero: true,
                    }
                }
            }
        });

        var currentMarksChart = new Chart(document.getElementById('currentMarksChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: 'Marks you got in the recent exam',
                    data: data.currentMarksData,
                    backgroundColor: '#ffffff',
                    borderColor: 'rgba(255,255,255,0.8)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 5
                    }
                }
            }
        });

        var priorityChart = new Chart(document.getElementById('priorityChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: data.labels,
                datasets: [{
                    label: 'priority',
                    data: data.priorityData,
                    backgroundColor: '#ffffff',
                    borderColor: 'rgba(255,255,255,0.8)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                        type: 'logarithmic', // Set the scale type to logarithmic
                        min: 2.5, // Set a minimum value greater than 0
                    }
                }
            }
        });
    }
</script>

<section class="graph-container rounded-box">
        <h2 style="color: white;">This week's Target Chain</h2>
        <svg class="chain-container" width="720" height="1000">
        </svg>

    <script>
        // Sample chains data
        var chains = [
            ["LinkedList", "Stack", "Tree", "Sorting"],
            ["LinkedList", "Stack", "Tree", "Searching"],
            ["LinkedList", "Stack", "Graph", "Heap"],
            ["LinkedList", "Stack", "Graph", "D Prog"],
            ["LinkedList", "Queue", "Hashing"],
            ["LinkedList", "Queue", "Heap"]
        ];

        // Get the SVG container element
        var svgContainer = document.querySelector('.chain-container');

        // Define circle attributes
        var circleRadius = 30;
        var circleGap = 150;

        // Define arrow attributes
        var arrowWidth = 10;
        var arrowHeight = 25;

        // Add circles, checkboxes, and arrows to SVG
        chains.forEach(function (chain, chainIndex) {
            // Create a group to contain the chain elements
            var chainGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');

            chain.forEach(function (item, index) {
                // Calculate circle position
                var cx = (index + 1) * circleGap;
                var cy = (chainIndex + 1) * circleGap;

                // Create circle
                var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                circle.setAttribute('class', 'chain-circle');
                circle.setAttribute('cx', cx);
                circle.setAttribute('cy', cy);
                circle.setAttribute('r', circleRadius);
                chainGroup.appendChild(circle);

                // Create text
                var text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                text.setAttribute('class', 'chain-text');
                text.setAttribute('x', cx);
                text.setAttribute('y', cy);
                text.textContent = item;
                chainGroup.appendChild(text);

                // Draw arrows
                if (index < chain.length - 1) {
                    var nextCx = (index + 2) * circleGap;

                    // Calculate arrow position
                    var arrowX1 = cx + circleRadius;
                    var arrowY1 = cy;
                    var arrowX2 = nextCx - circleRadius;
                    var arrowY2 = cy;

                    // Draw arrow line
                    var line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    line.setAttribute('x1', arrowX1);
                    line.setAttribute('y1', arrowY1);
                    line.setAttribute('x2', arrowX2);
                    line.setAttribute('y2', arrowY2);
                    line.setAttribute('stroke', '#3498db');
                    line.setAttribute('stroke-width', arrowWidth);
                    chainGroup.appendChild(line);

                    // Draw arrowhead
                    var arrowhead = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
                    arrowhead.setAttribute('points', `${arrowX2 - arrowWidth},${arrowY2 - arrowHeight / 2} ${arrowX2},${arrowY2} ${arrowX2 - arrowWidth},${arrowY2 + arrowHeight / 2}`);
                    arrowhead.setAttribute('fill', '#3498db');
                    chainGroup.appendChild(arrowhead);
                }
            });

            // Add the chain group to the SVG container
            svgContainer.appendChild(chainGroup);
        });
    </script>
</section>
</body>

</html>
